plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    group = 'com.grupo29'
    version = '0.0.1-SNAPSHOT'

    java {
        sourceCompatibility = '17'
    }
    repositories {
        mavenCentral()
    }
}

subprojects {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'com.mysql:mysql-connector-j'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    jacocoTestReport {
        additionalSourceDirs.setFrom(files(sourceSets.main.allSource.srcDirs))
        sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
        classDirectories.setFrom(files(sourceSets.main.output))

        reports {
            html.required = true
            xml.required = true
            csv.required = false
        }
    }
}

jacoco {
    toolVersion = '0.8.11'
}

ext {
    excludedClasses = [
            'com.grupo29.mback.user.Application*',
    ]
}

jacocoTestReport {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    executionData.setFrom(files(subprojects.jacocoTestReport.executionData))
    classDirectories.setFrom(files(subprojects.sourceSets.main.output))

    reports {
        html.required = true
        html.destination file("${buildDir}/reports/jacoco/test")
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        csv.required = false

    }

    onlyIf = { true }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludedClasses)
        }))
    }
}